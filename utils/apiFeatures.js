// REFACTORING API FEATURES
class APIfeatures{
    // query here is Tour.find(), and queryString here is req.query.anyMethod(filter(), sort() e.t.c)
    constructor(query, queryString){
        this.query = query;
        this.queryString = queryString;
    }

    filter(){
        const queryObjects = {...this.queryString};
        const excludedFields = ['page', 'sort', 'limit', 'fields' ];
        excludedFields.forEach(el=>delete queryObjects[el]);

        // (1B) ADVANCE FILETERING
        let queryStr = JSON.stringify(queryObjects)
        queryStr = queryStr.replace(/\b(gt|gte|lt|lte)\b/g, match => `$${match}`);
            console.log(JSON.parse(queryStr));
            this.query = this.query.find(JSON.parse(queryStr));
       return this;
    }

    sort(){
          // (2) SORTING
          if(this.queryString.sort){
            // mongoose accepts sort parameters with space, but comma(,) is used in the URL, therefore there is to separate the parameters by comma and join again by space, which is acceptable by mongoose.
            const sortBy = this.queryString.sort.split(',').join(' ');
                this.query = this.query.sort(sortBy);
        }else{
            this.query = this.query.sort('-createdAt');
        }
        return this;
    }

    limitFields(){
            // (3) FIELD LIMITING
            if(this.queryString.fields){
                const fields = this.queryString.fields.split(',').join(' ');
                this.query = this.query.select(fields);
                // The line of code two steps above will produce similar as below, mongoose accepts fields parameters with space, note that.
                // query = query.select('name duration price');
            }else{
                // the "-__v will hide the automatically generated __v field generated by mongo DB"
                this.query = this.query.select('-__v');
            }
            return this;
    }
    paginate(){
         // (4) PAGINATION
        // page and limit are multiplied by 1 to convert the query string value to number
        const page  = this.queryString.page * 1 || 1;
        const limit = this.queryString.limit * 1 || 10;
        const skip = (page - 1) * limit;
         this.query = this.query.skip(skip).limit(limit);
         return this;
    }
}

module.exports = APIfeatures;